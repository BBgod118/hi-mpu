# This Makefile is a sample file, do not use in product.
AS		= $(CROSS_COMPILE)as
LD		= $(CROSS_COMPILE)ld
CC		= $(CROSS_COMPILE)gcc
CPP		= $(CC) -E
AR		= $(CROSS_COMPILE)ar
NM		= $(CROSS_COMPILE)nm

STRIP		= $(CROSS_COMPILE)strip
OBJCOPY		= $(CROSS_COMPILE)objcopy
OBJDUMP		= $(CROSS_COMPILE)objdump

TOPDIR := $(shell pwd)

ROOT_DIR ?= $(TOPDIR)/../../../../..

REAL_TIME_DIR := $(ROOT_DIR)/src/real_time
LIBCK_SAMPLES_DIR := $(ROOT_DIR)/src/samples/real_time/libck
LIBCK_DIR := $(REAL_TIME_DIR)/libck
LIBCK_KERNEL_DIR := $(REAL_TIME_DIR)/libck/kernel
DRIVERS_DIR := $(REAL_TIME_DIR)/drivers
OUTPUT_DIR := $(ROOT_DIR)/build/build_libck/output

LIBMETAL_OUTPUT_DIR := $(OUTPUT_DIR)/libmetal
OPENAMP_OUTPUT_DIR := $(OUTPUT_DIR)/openamp

CFLAGS   := -fno-builtin -ffreestanding \
	-I$(LIBMETAL_OUTPUT_DIR)/include \
	-I$(OPENAMP_OUTPUT_DIR)/include \
	-I$(DRIVERS_DIR)/include \
	-I$(LIBCK_KERNEL_DIR)/include/hw/cpu \
	-I$(LIBCK_KERNEL_DIR)/include/securec \
	-I$(LIBCK_SAMPLES_DIR)/common \
	-I$(LIBCK_DIR)/include \
	-I$(LIBCK_KERNEL_DIR)/include \
	-I$(LIBCK_KERNEL_DIR)/include/common\
	-I$(LIBCK_KERNEL_DIR)/config \
	-I$(LIBCK_KERNEL_DIR)/include/arch \
	-I$(LIBCK_KERNEL_DIR)/include/external \
	-O2 \
	-fno-pic -ffunction-sections \
	-fdata-sections -fno-common \
	-fno-common -pipe -march=armv8.2-a+nosimd \
	-Wall -Wstrict-prototypes -fstack-protector-strong \
	$(MKFLAGS) -fno-strict-aliasing

CFLAGS += -Wdate-time -Wmissing-declarations -Wmissing-prototypes\
	-Wfloat-equal -Wformat=2  -Wswitch-default -Wtrampolines -Winit-self \
	-Wundef -Wimplicit-fallthrough=2 -Wshadow

POSIX_OPTION := -D_POSIX_THREADS -D_POSIX_THREAD_PRIORITY_SCHEDULING -D_POSIX_PRIORITY_SCHEDULING \
 				-D_POSIX_TIMERS -D_POSIX_CPUTIME -D_POSIX_THREAD_CPUTIME -D_POSIX_MONOTONIC_CLOCK -D_POSIX_TIMEOUTS \
  				-D_POSIX_CLOCK_SELECTION -D_POSIX_THREAD_PRIO_PROTECT -D_UNIX98_THREAD_MUTEX_ATTRIBUTES \
				-D_POSIX_READER_WRITER_LOCKS

CC_OPTION := -g -march=armv8.2-a+nosimd -Wl,--build-id=none -fno-builtin -fno-PIE -Wall -fno-dwarf2-cfi-asm -O0 -mcmodel=large -fomit-frame-pointer -fzero-initialized-in-bss -fdollars-in-identifiers -ffunction-sections -fdata-sections -fno-common -fno-aggressive-loop-optimizations -fno-optimize-strlen -fno-schedule-insns -fno-inline-small-functions -fno-inline-functions-called-once -fno-strict-aliasing -fno-builtin -finline-limit=20 -mstrict-align -mlittle-endian -nostartfiles -funwind-tables
AS_OPTION := -g -march=armv8.2-a+nosimd -Wl,--build-id=none -fno-builtin -fno-PIE -Wall -fno-dwarf2-cfi-asm -O0 -mcmodel=large -fomit-frame-pointer -fzero-initialized-in-bss -fdollars-in-identifiers -ffunction-sections -fdata-sections -fno-common -fno-aggressive-loop-optimizations -fno-optimize-strlen -fno-schedule-insns -fno-inline-small-functions -fno-inline-functions-called-once -fno-strict-aliasing -fno-builtin -finline-limit=20 -mstrict-align -mlittle-endian -nostartfiles -mgeneral-regs-only -DENV_EL1

LINK_OPTION := -g -march=armv8.2-a+nosimd -Wl,--build-id=none -fno-builtin -fno-PIE -Wall -fno-dwarf2-cfi-asm -O0 -mcmodel=large -fomit-frame-pointer -fzero-initialized-in-bss -fdollars-in-identifiers -ffunction-sections -fdata-sections -fno-common -fno-aggressive-loop-optimizations -fno-optimize-strlen -fno-schedule-insns -fno-inline-small-functions -fno-inline-functions-called-once -fno-strict-aliasing -fno-builtin -finline-limit=20 -mstrict-align -mlittle-endian -nostartfiles -funwind-tables

CFLAGS += $(CC_OPTION)
CFLAGS += $(POSIX_OPTION)
CFLAGS += -D__LIBCK__

ASFLAGS := $(CFLAGS)

LDFLAGS := $(LINK_OPTION)
LDFLAGS += $(POSIX_OPTION)
LDFLAGS += -static -no-pie

TARGET_LDS := $(LIBCK_SAMPLES_DIR)/common/hi309x.lds

ifneq ($(wildcard $(REAL_TIME_DIR)/lib/libCortexMXsec_c.lib),)
EXTEND_INCLUDE += $(REAL_TIME_DIR)/lib/libCortexMXsec_c.lib
else
$(error "can not find libCortexMXsec_c.lib")
endif

ifneq ($(wildcard $(REAL_TIME_DIR)/lib/liblibck.a),)
EXTEND_INCLUDE += $(REAL_TIME_DIR)/lib/liblibck.a
else
$(error "can not find liblibck.a")
endif

ifneq ($(wildcard $(OUTPUT_DIR)/libmetal/lib/libmetal.a),)
EXTEND_INCLUDE += $(OUTPUT_DIR)/libmetal/lib/libmetal.a
else
$(error "$(OUTPUT_DIR)/libmetal/lib/libmetal.a can not find libmetal.a")
endif

ifneq ($(wildcard $(OUTPUT_DIR)/openamp/lib/libopen_amp.a),)
EXTEND_INCLUDE += $(OUTPUT_DIR)/openamp/lib/libopen_amp.a
else
$(error "can not find libopen_amp.a")
endif

ifneq ($(wildcard $(REAL_TIME_DIR)/lib/libc.a),)
EXTEND_INCLUDE += $(REAL_TIME_DIR)/lib/libc.a
else
$(error "can not find libc.a")
endif

ifneq ($(wildcard $(REAL_TIME_DIR)/lib/libm.a),)
EXTEND_INCLUDE += $(REAL_TIME_DIR)/lib/libm.a
else
$(error "can not find libm.a")
endif

SOURCE  := $(wildcard *.c) $(wildcard *.S)
SOURCE  += $(wildcard $(LIBCK_SAMPLES_DIR)/common/*.c)

OBJS    := $(patsubst %.c,%.o,$(patsubst %.S,%.o,$(SOURCE)))

export CFLAGS LDFLAGS

TARGET := $(TARGET_NAME)

TARGET_CORE3 := $(TARGET_NAME)_core3

$(TARGET):$(TARGET_CORE2) $(TARGET_CORE3)

$(TARGET_CORE3):$(OBJS)
	$(CC) $(LDFLAGS) -T $(TARGET_LDS) $(OBJS) $(LIB_INCLUDE) -Wl,--gc-sections -Wl,--start-group $(EXTEND_INCLUDE) -Wl,--end-group -o $@.elf \
	-Wl,-Map=$@.map
	$(OBJCOPY) --gap-fill=0xff -O binary $@.elf $@.bin
	$(OBJDUMP) -d  $@.elf > $@.asm

%.o : %.c
	$(CC) $(CFLAGS) -c -o $@ $<

%.o: %.S
	$(CC) -D__ASSEMBLY__ $(CFLAGS) -o $@ $< -c

clean:
	rm -f $(shell find -name "*.o")
	rm -f $(shell find -name "*.elf")
	rm -f $(shell find -name "*.map")
	rm -f $(shell find -name "*.bin")
	rm -f $(shell find -name "*.asm")
	rm -rf $(LIBCK_SAMPLES_DIR)/common/*.o
	rm -rf $(LIBCK_SAMPLES_DIR)/common/*.i
	rm -f $(shell find -name "*.i")
